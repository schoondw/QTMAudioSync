function [sync_admin]=sync_generate_admin(varargin)
% Function for finding time overlapping audio and mocap files
% 
% Generates a sync administration file (default: sync_admin.txt) for the
% following steps.
% 
% Performs a SMPTE check. Results reported in a text file
% (default: smpte_check.txt).
%

% Alternatively the function or parts of it can be used as a script

%% Main parameters

% Names of files generated by this script
% sync_admin_file='sync_admin.txt';

sync_admin_file = 'admin.xlsx';
audio_data_sheet = 'audio_data';
sync_admin_sheet = 'sync_admin';

% time_stamp_admin_file='smpte_time_stamp_admin.csv';
timeref_var='timeref_ltc';

% Paths (relative to current pos)
mocap_path='QTM';

%% Overrule main parameters
P=parse_options(varargin);
opts=fieldnames(P);
for p1=1:length(opts)
    eval(sprintf('%s=P.%s;',opts{p1},opts{p1}))
end

%% Retrieve file lists

% List of QTM exported matlab files
mcfiles=dir(fullfile(mocap_path,'*.mat'));
N_mc=length(mcfiles);

% Read audio time stamp admin
% ts_admin=read_dat(time_stamp_admin_file);
ts_admin = readtable(sync_admin_file,'Sheet',audio_data_sheet);
N_audio_rows=length(ts_admin.track_files);

% Convert time ref value (sample number) to time in s
t_au=bsxfun(@plus,ts_admin.(timeref_var)./ts_admin.fs_audio,...
    [zeros(N_audio_rows,1) (ts_admin.N_audio-1)./ts_admin.fs_audio]);

%% Create time stamp arrays (in s) for mocap files
t_mc=zeros(N_mc,2);
smpte_flag=zeros(N_mc,1);
matching_audio_files=cell(N_mc,1);
au_crop=zeros(N_mc,2);
skip=zeros(N_mc,1);

for i1=1:N_mc
    fprintf('Analyzing sync %s (%d/%d)\n',mcfiles(i1).name,i1,N_mc)
    
    qtm=qtmread(fullfile(mocap_path,mcfiles(i1).name));
    qtm=qtm_timecode_uint64todouble(qtm,'SMPTETimecode'); % Cast to double (QTM 2.16 and later exports timecode as uint64)
    
    % Read SMPTE
    if ~isfield(qtm,'SMPTETimecode')
        fprintf('- No SMPTE time code found in %s.\n--Syncing skipped.\n',mc_fn);
        continue
    else
        SMPTE=qtm.SMPTETimecode;
        smpte_fps=max([SMPTE.Frame])+1;
    end
    
    % Warning flag in case there are missing time stamps 
    if sum([SMPTE.Missing])>0
        disp('- Warning: missing SMPTE time stamps detected')
        smpte_flag(i1)=1;
    end
    
    % Find first SMPTE time stamp to make more robust in case of missing
    % SMPTE timestamp (should normally be the first frame) 
    k=find([SMPTE(:).Missing]==0,1);
    
    % Calculate start and end time (not exact, only for finding matching audio)
    t_mc(i1,1)=smpte2sec(SMPTE(k),smpte_fps)-(k-1)/qtm.FrameRate;
    t_mc(i1,2)=t_mc(i1,1)+qtm.Frames/qtm.FrameRate;
    
    % Find matching audio bundles
    i_match=~(t_au(:,1)>t_mc(i1,2) | t_au(:,2)<t_mc(i1,1));
    
    if sum(i_match)==0
        matching_audio_files{i1}='X';
        skip(i1)=1;
        disp('- Warning: no audio track found')
        disp('- Sync will be skipped.')
        disp(' ')
        continue;
    elseif sum(i_match)>1
        matching_audio_files{i1}='XXX';
        skip(i1)=1;
        disp('- Warning: overlapping sets of audio tracks detected:')
        disp(ts_admin.track_files(i_match))
        disp('- Sync will be skipped.')
        fprintf('- Manual review of time stamp admin file (%s) recommended\n\n',time_stamp_admin_file)
        continue;
    else
        matching_audio_files{i1}=ts_admin.track_files{i_match};
        fs_au=ts_admin.fs_audio(i_match);
        timeref_au=ts_admin.(timeref_var)(i_match); % expressed as audio sample no.
    end
    
    % Time stamp of first full SMPTE frame
    ff=find(diff(int64([SMPTE.Frame]))')+1; % Start of full SMPTE frames (in mocap samples)
    mc_first_smpte_frame=smpte2frame(SMPTE(ff(1)),smpte_fps); % Convert to total number of SMPTE frames
    mc_offset=ff(1)-1; % Offset of first SMPTE frame (in mocap samples)
    
    % Convert to corresponding value in audio samples
    nsf_au=fs_au/smpte_fps;  % Number of audio samples per smpte frame (should be integer)
    au_crop(i1,1)=floor(mc_first_smpte_frame*nsf_au-...
        mc_offset*fs_au/qtm.FrameRate-...
        timeref_au)+1;
    au_crop(i1,2)=au_crop(i1,1)+qtm.Frames*fs_au/qtm.FrameRate-1;
end

%% Write results to file (for manual review)

N_rows=length(mcfiles);

sync_admin_struct=struct(...
    'mc_file',{{mcfiles.name}'},...
    'skip',skip,...
    'smpte_flag',smpte_flag,...
    'au_files',{matching_audio_files},...
    'au_crop',{cellfun(@mat2str,mat2cell(au_crop,ones(1,N_rows),2),'UniformOutput',false)});

% write_dat(admin,sync_admin_file);

% Add to Excel
sync_admin = struct2table(sync_admin_struct);
writetable(sync_admin,sync_admin_file,'Sheet',sync_admin_sheet);

disp('Done!')
